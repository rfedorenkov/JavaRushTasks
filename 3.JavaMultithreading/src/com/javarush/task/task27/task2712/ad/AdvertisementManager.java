package com.javarush.task.task27.task2712.ad;

import com.javarush.task.task27.task2712.ConsoleHelper;

import java.util.Collections;

/**
 * Класс менеджера рекламы.
 * У каждого планшета будет свой объект менеджера, который будет
 * подбирать оптимальный набор роликов и их последовательность для каждого заказа.
 * Так же будет взаимодействовать с плеером и отображать ролики.
 */
public class AdvertisementManager {
    // Хранилище рекламных роликов
    private final AdvertisementStorage storage = AdvertisementStorage.STORAGE;

    // Время выполнения заказа секундах
    private int timeSeconds;

    /**
     * Конструктор класса.
     *
     * @param timeSeconds Время выполнения заказа в секундах.
     */
    public AdvertisementManager(int timeSeconds) {
        this.timeSeconds = timeSeconds;
    }


    /**
     * Метод обрабатывает рекламное видео.
     * Метод подбирает список видео из доступных, просмотр которых
     * обеспечивает максимальную выгоду.
     *
     * @throws NoVideoAvailableException Если нет видео с рекламой.
     */
    public void processVideos() throws NoVideoAvailableException {
        // Если нет рекламных видео, то бросаем исключение
        if (storage.list().isEmpty()) {
            throw new NoVideoAvailableException("No video is available for the order ");
        }

        // TODO 2.2 (Подобрать список видео из доступных, просмотр которых обеспечивает максимальную выгоду)
        // Рекурсию используют тогда, когда алгоритм решения задачи совпадает с алгоритмом решения подзадачи (части).
        // У нас как раз такой случай. Нам нужно сделать полный перебор всех вариантов и выбрать из них лучший.
        //
        // Напомню, рекурсия пишется по следующему принципу:
        // а) условие выхода/окончания рекурсии
        // б) условие продолжения - вызов самой себя с набором параметров предыдущего шага.
        // В любое время ты можешь почитать в инете подробную информацию по написанию рекурсии.
        //
        // Текущее задание - реализовать п.2.2 предыдущего задания с помощью рекурсии.
        // (подобрать список видео из доступных, просмотр которых обеспечивает максимальную выгоду)
        // Рекурсивный метод должен выбрать набор рекламных роликов, которые будут показаны посетителю.
        //
        // Этот набор должен удовлетворять следующим требованиям:
        // 1. сумма денег, полученная от показов, должна быть максимальной из всех возможных вариантов
        // 2. общее время показа рекламных роликов НЕ должно превышать время приготовления блюд для текущего заказа;
        // 3. для одного заказа любой видео-ролик показывается не более одного раза;
        // 4. если существует несколько вариантов набора видео-роликов с одинаковой суммой денег, полученной от показов, то:
        // 4.1. выбрать тот вариант, у которого суммарное время максимальное;
        // 4.2. если суммарное время у этих вариантов одинаковое, то выбрать вариант с минимальным количеством роликов;
        // 5. количество показов у любого рекламного ролика из набора - положительное число.

        int totalSum = 0;
        int maximumSum = 1000;


        // Пример для заказа [WATER]:
        // First Video is displaying... 50, 277
        Collections.sort(storage.list());

        for (Advertisement ad : storage.list()) {
            // Выводим в консоль
            ConsoleHelper.writeMessage(ad.toString());

            // Уменьшаем количество показов
            ad.revalidate();
        }
    }
}

//Requirements:
//1. Сумма денег, полученная от показов, должна быть максимальной из всех возможных вариантов.
//2. Общее время показа рекламных роликов НЕ должно превышать время приготовления блюд для текущего заказа.
//3. Для одного заказа любой видео-ролик должен показываться не более одного раза.

//4. Если существует несколько вариантов набора видео-роликов с одинаковой суммой денег,
// полученной от показов, то должен быть выбран вариант с максимальным суммарным временем.

//5. Если существует несколько вариантов набора видео-роликов с одинаковой суммой денег
// и одинаковым суммарным временем, то должен быть выбран вариант с минимальным количеством роликов.

//6. В набор должны отбираться только ролики с положительным числом показов.
//7. Для каждого показанного ролика должен быть вызван метод revalidate.